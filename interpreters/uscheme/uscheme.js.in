/* eslint-disable */
import { defineSchemeMode } from '../utils/defineSchemeMode';

// Exported functions/values
let uscheme_filemap = new Map(),
    uscheme_eval,
    uscheme_reset;

// These are global variables referenced by the compiled code.
// Maybe these can be determined programatically.
let CompilerInitial,
    Con,
    SMLtoJs,
    SmlPrims,
    basis$0Initial$1,
    basis$0General$1,
    basis$0List$1,
    basis$0ListPair$1,
    basis$0StringCvt$1,
    basis$0StrBase$1,
    basis$0Char$1,
    basis$0String$1,
    basis$0IntInfRep$1,
    basis$0IO$1,
    basis$0Substring$1,
    basis$0Int32$1,
    js$0JsCore$1,
    js$0Js$1,
    uscheme$0JsMap$1,
    uscheme$0stubs$1,
    uscheme$0mlscheme$1,
    uscheme$0run$1
// {{SCRIPT}}
/* eslint-enable */

defineSchemeMode({
    name: 'uscheme',
    keywords: [
        'val', 'define', 'use',
        'check-expect', 'check-assert', 'check-error',
        'set', 'if', 'while', 'begin',
        '&&', '||',
        'let', 'letrec', 'let*', 'quote', 'cond',

        '+', '-', '*', '/', '<', '>', '=', 'null?', 'boolean?', 'number?',
        'symbol?', 'pair?', 'function?', 'cons', 'car', 'cdr', 'println',
        'print', 'printu', 'hash', 'error',
        'caar', 'cadr', 'cdar', 'cddr', 'caaar',
        'caadr', 'cadar', 'caddr', 'cdaar', 'cdadr', 'cddar', 'cdddr',
        'caaaar', 'caaadr', 'caadar', 'caaddr', 'cadaar', 'cadadr', 'caddar', 'cadddr', 'cdaaar', 'cdaadr', 'cdadar', 'cdaddr', 'cddaar', 'cddadr', 'cdddar', 'cddddr',
        'list1', 'list2', 'list3',
        'append', 'revapp', 'reverse', 'and', 'or', 'not',
        'atom?', 'equal?', 'make-alist-pair', 'alist-pair-key', 'alist-pair-attribute',
        'bind', 'find', 'curry', 'uncurry', 'o',
        'filter', 'map', 'app', 'exists?', 'all?', 'foldr', 'foldl', 'newline',
        'space', 'semicolon', 'quotemark', '<=', '>=', '!=', 'max', 'min',
        'negated', 'mod', 'gcd', 'lcm', 'list4', 'list5', 'list6', 'list7', 'list8'
    ],
    indentKeywords: [
        'val', 'define', 'set', 'if',
        'let', 'letrec', 'let*', 'cond'
    ]
});

export class UScheme {
    name = 'uscheme';
    mode = 'uscheme';
    autoCloseBrackets = '()[]{}';
    extension = '.scm'
    async setFilemap(filemap) {
        uscheme_filemap = filemap;
    }
    async eval(str) {
        return uscheme_eval(str);
    }
    async reset() {
        uscheme_reset();
    }
};

